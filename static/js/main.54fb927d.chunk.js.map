{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["Pagination","props","totalPages","page","perPage","onPageChange","onPerPageChange","withInfo","useSearchParams","queryParams","pageFromParams","get","perPageFromParams","useEffect","numberOfButtons","Math","ceil","buttons","useMemo","Array","from","length","_","index","currPage","currPerPage","prevButton","nextButton","lastButton","isLastButton","isVisibleButtons","button","threeDots","visibleButtons","filtered","filter","firstBtn","shift","lastBtn","pop","firstItemOnPage","lastItemOnPage","className","to","pathname","search","classNames","onClick","map","type","disabled","String","value","onChange","target","App","useState","setCurrPage","setPerPage","navigate","useNavigate","useCallback","newCurrPage","newPerPage","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54fb927d.chunk.js","sourcesContent":["import { FC, useEffect, useMemo } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport './Pagination.scss';\n\ntype Props = {\n  totalPages: number,\n  perPage: number,\n  page: number,\n  onPageChange: (newCurrPage: number) => void,\n  onPerPageChange: (newPerPage: number) => void,\n  withInfo: boolean | true,\n};\n\nexport const Pagination: FC<Props> = (props) => {\n  const {\n    totalPages,\n    page,\n    perPage,\n    onPageChange,\n    onPerPageChange,\n    withInfo,\n  } = props;\n\n  const [queryParams] = useSearchParams();\n\n  const pageFromParams = queryParams.get('page');\n  const perPageFromParams = queryParams.get('perPage');\n\n  useEffect(() => {\n    if (pageFromParams && perPageFromParams) {\n      onPageChange(+pageFromParams);\n      onPerPageChange(+perPageFromParams);\n    }\n  }, []);\n\n  const numberOfButtons = Math.ceil(totalPages / perPage);\n  const buttons = useMemo(() => {\n    return Array.from({ length: numberOfButtons }, (_, index) => index + 1);\n  }, [totalPages, perPage]);\n\n  let currPage = page;\n  const currPerPage = perPage;\n\n  if (currPage > numberOfButtons) {\n    currPage = numberOfButtons;\n  }\n\n  if (currPage < 1) {\n    currPage = 1;\n  }\n\n  const prevButton = (currPage - 1) < 0 ? 1 : (currPage - 1);\n  const nextButton = (currPage + 1) > numberOfButtons\n    ? numberOfButtons\n    : (currPage + 1);\n  const lastButton = numberOfButtons;\n  const firstButton = 1;\n\n  const isLastButton = currPage === numberOfButtons;\n\n  const isVisibleButtons = (button: number) => {\n    const first5Buttons = (button <= 5 && currPage <= 3);\n    const last5Buttons = (button >= (numberOfButtons - 4)\n          && currPage >= (numberOfButtons - 2));\n\n    return button === currPage\n        || button === firstButton\n        || button === prevButton\n        || button === nextButton\n        || button === lastButton\n        || first5Buttons\n        || last5Buttons;\n  };\n\n  const threeDots = numberOfButtons + 8230;\n\n  const visibleButtons = useMemo(() => {\n    let filtered = buttons.filter(isVisibleButtons);\n\n    if (prevButton > 2 && numberOfButtons > 5) {\n      const firstBtn = filtered && filtered.shift();\n\n      filtered = firstBtn\n        ? [firstBtn, threeDots, ...filtered]\n        : filtered;\n    }\n\n    if (nextButton < (buttons.length - 1) && numberOfButtons > 5) {\n      const lastBtn = filtered && filtered.pop();\n\n      filtered = lastBtn\n        ? [...filtered, threeDots, lastBtn]\n        : filtered;\n    }\n\n    return filtered;\n  }, [isVisibleButtons]);\n\n  const firstItemOnPage = (currPage * currPerPage - currPerPage) + 1;\n  let lastItemOnPage = firstItemOnPage + currPerPage - 1;\n\n  if (isLastButton) {\n    lastItemOnPage = totalPages;\n  }\n\n  return (\n    <>\n      <h1 className=\"content\">\n        {withInfo\n          ? `${firstItemOnPage} - ${lastItemOnPage} of ${totalPages}`\n          : 'Choose page'}\n      </h1>\n\n      <nav className=\"pagination\">\n        <Link\n          to={{ pathname: '/', search: `?page=${prevButton}&perPage=${perPage}` }}\n          className={classNames(\n            'pagination__prev-btn pagination__btn',\n            { 'pagination__btn--disabled': currPage === 1 },\n          )}\n          onClick={() => onPageChange(prevButton)}\n        >\n          {'<'}\n        </Link>\n\n        <div className=\"pagination__buttons\">\n          {visibleButtons.map((button, index) => {\n            if (button === threeDots) {\n              return (\n                <button\n                  type=\"button\"\n                  className=\"pagination__btn pagination__btn--disabled\"\n                  key={button + String(index)}\n                  onClick={() => onPageChange(button)}\n                  disabled\n                >\n                  &#8230;\n                </button>\n              );\n            }\n\n            return (\n              <Link\n                to={{ pathname: '/', search: `?page=${button}&perPage=${perPage}` }}\n                className={classNames(\n                  'pagination__item pagination__btn',\n                  { 'pagination__btn--disabled': button === currPage },\n                )}\n                key={button}\n                onClick={() => onPageChange(button)}\n              >\n                {button}\n              </Link>\n            );\n          })}\n        </div>\n\n        <Link\n          className={classNames(\n            'pagination__next-btn pagination__btn',\n            { 'pagination__btn--disabled': isLastButton },\n          )}\n          to={{ pathname: '/', search: `?page=${nextButton}&perPage=${perPage}` }}\n          onClick={() => onPageChange(nextButton)}\n        >\n          {'>'}\n        </Link>\n      </nav>\n\n      <div className=\"pagination__settings\">\n        <p className=\"pagination__settings-title\">\n          Items on a page:\n        </p>\n        <select\n          className=\"pagination__select\"\n          value={currPerPage}\n          onChange={({ target }) => {\n            onPerPageChange(+target.value);\n          }}\n        >\n          <option>3</option>\n          <option>5</option>\n          <option>10</option>\n          <option>20</option>\n        </select>\n      </div>\n    </>\n  );\n};\n","import {\n  FC, useCallback, useState,\n} from 'react';\nimport { Routes, Route, useNavigate } from 'react-router-dom';\nimport { Pagination } from './components/Pagination';\n\nimport './App.css';\n\nconst App:FC = () => {\n  const [page, setCurrPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n  const totalPages = 42;\n  const navigate = useNavigate();\n\n  const onPageChange = useCallback((newCurrPage: number) => {\n    setCurrPage(newCurrPage);\n  }, [page, perPage]);\n\n  const onPerPageChange = useCallback((newPerPage: number) => {\n    setPerPage(newPerPage);\n    navigate('/');\n  }, [perPage, page]);\n\n  return (\n    <Routes>\n      <Route\n        path=\"/*\"\n        element={\n          (\n            <Pagination\n              totalPages={totalPages}\n              page={page}\n              perPage={perPage}\n              onPageChange={onPageChange}\n              onPerPageChange={onPerPageChange}\n              withInfo\n            />\n          )\n        }\n      />\n    </Routes>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}