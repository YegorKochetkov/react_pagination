{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["Pagination","props","totalPages","perPage","onPageChange","onPerPageChange","withInfo","useSearchParams","queryParams","newPage","Number","get","newPerPage","useEffect","numberOfButtons","Math","ceil","buttons","useMemo","Array","from","length","_","index","currPage","currPerPage","prevButton","nextButton","lastButton","isLastButton","visibleButtons","filter","button","threeDots","firstBtn","shift","lastBtn","pop","onPage","firstItemOnPage","lastItemOnPage","className","to","pathname","search","classNames","map","type","disabled","String","value","onChange","target","App","useState","page","setCurrPage","setPerPage","useCallback","newCurrPage","newPerPage2","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a30405e0.chunk.js","sourcesContent":["import { FC, useEffect, useMemo } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport './Pagination.scss';\n\ntype Props = {\n  totalPages: number,\n  perPage: number,\n  // page: number | 1,\n  onPageChange: (newCurrPage: number) => void,\n  onPerPageChange: (newPerPage: number) => void,\n  // prevPage: () => void,\n  // nextPage: () => void,\n  withInfo: boolean | true,\n};\n\nexport const Pagination: FC<Props> = (props) => {\n  const {\n    totalPages,\n    perPage,\n    onPageChange,\n    onPerPageChange,\n    withInfo,\n  } = props;\n\n  const [queryParams] = useSearchParams();\n\n  const newPage = Number(queryParams.get('page')) || 1;\n  const newPerPage = Number(queryParams.get('perPage')) || 5;\n\n  useEffect(() => {\n    onPageChange(newPage);\n    onPerPageChange(newPerPage);\n  }, [queryParams]);\n\n  const numberOfButtons = Math.ceil(totalPages / perPage);\n  const buttons = useMemo(() => {\n    return Array.from({ length: numberOfButtons }, (_, index) => index + 1);\n  }, [totalPages, perPage]);\n\n  let currPage = newPage;\n  const currPerPage = newPerPage;\n\n  if (currPage > numberOfButtons) {\n    currPage = numberOfButtons;\n  }\n\n  if (currPage < 1) {\n    currPage = 1;\n  }\n\n  const prevButton = (currPage - 1) < 0 ? 1 : (currPage - 1);\n  const nextButton = (currPage + 1) > numberOfButtons\n    ? numberOfButtons\n    : (currPage + 1);\n  const lastButton = numberOfButtons;\n  const firstButton = 1;\n\n  const isLastButton = currPage === numberOfButtons;\n\n  const isVisibleButtons = (button: number) => {\n    const first5Buttons = (button <= 5 && currPage <= 3);\n    const last5Buttons = (button >= (numberOfButtons - 4)\n          && currPage >= (numberOfButtons - 2));\n\n    return button === currPage\n        || button === firstButton\n        || button === prevButton\n        || button === nextButton\n        || button === lastButton\n        || first5Buttons\n        || last5Buttons;\n  };\n\n  let visibleButtons = buttons.filter(isVisibleButtons);\n\n  const threeDots = numberOfButtons + 8230;\n\n  if (prevButton > 2 && numberOfButtons > 5) {\n    const firstBtn = visibleButtons && visibleButtons.shift();\n\n    visibleButtons = firstBtn\n      ? [firstBtn, threeDots, ...visibleButtons]\n      : visibleButtons;\n  }\n\n  if (nextButton < (buttons.length - 1) && numberOfButtons > 5) {\n    const lastBtn = visibleButtons && visibleButtons.pop();\n\n    visibleButtons = lastBtn\n      ? [...visibleButtons, threeDots, lastBtn]\n      : visibleButtons;\n  }\n\n  const onPage = Math.ceil(totalPages / numberOfButtons);\n  const firstItemOnPage = (currPage * onPage - onPage) + 1;\n  let lastItemOnPage = currPage * onPage;\n\n  if (isLastButton) {\n    lastItemOnPage = totalPages;\n  }\n\n  return (\n    <>\n      <h1 className=\"content\">\n        {withInfo\n          ? `${firstItemOnPage} - ${lastItemOnPage} of ${totalPages}`\n          : 'Choose page'}\n      </h1>\n\n      <nav className=\"pagination\">\n        <Link\n          to={{ pathname: '/', search: `?page=${prevButton}&perPage=${perPage}` }}\n          className={classNames(\n            'pagination__prev-btn pagination__btn',\n            { 'pagination__btn--disabled': currPage === 1 },\n          )}\n        >\n          {'<'}\n        </Link>\n\n        <div className=\"pagination__buttons\">\n          {visibleButtons.map((button, index) => {\n            if (button === threeDots) {\n              return (\n                <button\n                  type=\"button\"\n                  className=\"pagination__btn pagination__btn--disabled\"\n                  key={button + String(index)}\n                  disabled\n                >\n                  &#8230;\n                </button>\n              );\n            }\n\n            return (\n              <Link\n                to={{ pathname: '/', search: `?page=${button}&perPage=${perPage}` }}\n                className={classNames(\n                  'pagination__item pagination__btn',\n                  { 'pagination__btn--disabled': button === currPage },\n                )}\n                key={button}\n              >\n                {button}\n              </Link>\n            );\n          })}\n        </div>\n\n        <Link\n          className={classNames(\n            'pagination__next-btn pagination__btn',\n            { 'pagination__btn--disabled': isLastButton },\n          )}\n          to={{ pathname: '/', search: `?page=${nextButton}&perPage=${perPage}` }}\n        >\n          {'>'}\n        </Link>\n      </nav>\n\n      <div className=\"pagination__settings\">\n        <p className=\"pagination__settings-title\">\n          Items on a page:\n        </p>\n        <select\n          className=\"pagination__select\"\n          value={currPerPage}\n          onChange={({ target }) => {\n            onPerPageChange(+target.value);\n          }}\n        >\n          <option>3</option>\n          <option>5</option>\n          <option>10</option>\n          <option>20</option>\n        </select>\n      </div>\n    </>\n  );\n};\n","import {\n  FC, useCallback, useState,\n} from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { Pagination } from './components/Pagination';\nimport './App.css';\n\nconst App:FC = () => {\n  const [page, setCurrPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n  const totalPages = 42;\n\n  const onPageChange = useCallback((newCurrPage: number) => {\n    setCurrPage(newCurrPage);\n  }, [page]);\n\n  const onPerPageChange = useCallback((newPerPage2: number) => {\n    setPerPage(newPerPage2);\n  }, [perPage]);\n\n  return (\n    <>\n      <Routes>\n        <Route\n          path=\"/*\"\n          element={\n            (\n              <Pagination\n                totalPages={totalPages}\n                perPage={perPage}\n                onPageChange={onPageChange}\n                onPerPageChange={onPerPageChange}\n                withInfo\n              />\n            )\n          }\n        />\n      </Routes>\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}