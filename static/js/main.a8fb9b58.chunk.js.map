{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["Pagination","props","totalPages","perPage","page","onPageChange","onPerPageChange","prevPage","nextPage","withInfo","numberOfButtons","Math","ceil","buttons","useMemo","Array","from","length","_","index","currPage","prevButton","nextButton","lastButton","isLastButton","visibleButtons","filter","button","threeDots","firstBtn","shift","lastBtn","pop","onPage","firstItemOnPage","lastItemOnPage","useEffect","className","type","classNames","onClick","disabled","map","String","value","onChange","target","App","useState","setCurrPage","setPerPage","useCallback","newCurrPage","newPerPage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8fb9b58.chunk.js","sourcesContent":["import { FC, useEffect, useMemo } from 'react';\nimport classNames from 'classnames';\nimport './Pagination.scss';\n\ntype Props = {\n  totalPages: number,\n  perPage: number | 5,\n  page: number | 1,\n  onPageChange: (newCurrPage: number) => void,\n  onPerPageChange: (newPerPage: number) => void,\n  prevPage: () => void,\n  nextPage: () => void,\n  withInfo: boolean | true,\n};\n\nexport const Pagination: FC<Props> = (props) => {\n  const {\n    totalPages,\n    perPage,\n    page,\n    onPageChange,\n    onPerPageChange,\n    prevPage,\n    nextPage,\n    withInfo,\n  } = props;\n\n  const numberOfButtons = Math.ceil(totalPages / perPage);\n  const buttons = useMemo(() => {\n    return Array.from({ length: numberOfButtons }, (_, index) => index + 1);\n  }, [totalPages, perPage]);\n\n  let currPage = page;\n\n  if (currPage > numberOfButtons) {\n    currPage = numberOfButtons;\n  }\n\n  if (currPage < 1) {\n    currPage = 1;\n  }\n\n  const prevButton = (currPage - 1) < 0 ? 1 : (currPage - 1);\n  const nextButton = (currPage + 1) > numberOfButtons\n    ? numberOfButtons\n    : (currPage + 1);\n  const lastButton = numberOfButtons;\n  const firstButton = 1;\n\n  const isLastButton = currPage === numberOfButtons;\n\n  const isVisibleButtons = (button: number) => {\n    const first5Buttons = (button <= 5 && currPage <= 3);\n    const last5Buttons = (button >= (numberOfButtons - 4)\n      && currPage >= (numberOfButtons - 2));\n\n    return button === currPage\n        || button === firstButton\n        || button === prevButton\n        || button === nextButton\n        || button === lastButton\n        || first5Buttons\n        || last5Buttons;\n  };\n\n  let visibleButtons = buttons.filter(isVisibleButtons);\n\n  const threeDots = numberOfButtons + 8230;\n\n  if (prevButton > 2 && numberOfButtons > 5) {\n    const firstBtn = visibleButtons && visibleButtons.shift();\n\n    visibleButtons = firstBtn\n      ? [firstBtn, threeDots, ...visibleButtons]\n      : visibleButtons;\n  }\n\n  if (nextButton < (buttons.length - 1) && numberOfButtons > 5) {\n    const lastBtn = visibleButtons && visibleButtons.pop();\n\n    visibleButtons = lastBtn\n      ? [...visibleButtons, threeDots, lastBtn]\n      : visibleButtons;\n  }\n\n  const onPage = Math.ceil(totalPages / numberOfButtons);\n  const firstItemOnPage = (currPage * onPage - onPage) + 1;\n  let lastItemOnPage = currPage * onPage;\n\n  if (isLastButton) {\n    lastItemOnPage = totalPages;\n  }\n\n  useEffect(() => {\n    onPageChange(currPage);\n  }, [currPage]);\n\n  return (\n    <>\n      {withInfo && (\n        <h1 className=\"content\">\n          {`${firstItemOnPage} - ${lastItemOnPage} of `}\n          {totalPages}\n        </h1>\n      )}\n      <nav className=\"pagination\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'pagination__prev-btn pagination__btn',\n          )}\n          onClick={prevPage}\n          disabled={currPage === 1}\n        >\n          {'<<'}\n        </button>\n\n        <div className=\"pagination__buttons\">\n          {visibleButtons.map((button, index) => {\n            if (button === threeDots) {\n              return (\n                <button\n                  type=\"button\"\n                  className=\"pagination__item-dots pagination__btn\"\n                  key={button + String(index)}\n                  disabled\n                >\n                  &#8230;\n                </button>\n              );\n            }\n\n            return (\n              <button\n                type=\"button\"\n                className={classNames(\n                  'pagination__item pagination__btn',\n                )}\n                key={button}\n                onClick={() => onPageChange(button)}\n                disabled={button === currPage}\n              >\n                {button}\n              </button>\n            );\n          })}\n        </div>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'pagination__next-btn pagination__btn',\n          )}\n          onClick={nextPage}\n          disabled={isLastButton}\n        >\n          {'>>'}\n        </button>\n      </nav>\n\n      <div className=\"pagination__settings\">\n        <p className=\"pagination__settings-title\">\n          Items on a page:\n        </p>\n        <select\n          className=\"pagination__select pagination__btn\"\n          value={perPage}\n          onChange={({ target }) => {\n            onPerPageChange(+target.value);\n          }}\n        >\n          <option>3</option>\n          <option>5</option>\n          <option>10</option>\n          <option>20</option>\n        </select>\n      </div>\n    </>\n  );\n};\n","import {\n  FC,\n  useCallback,\n  useState,\n} from 'react';\nimport { Pagination } from './components/Pagination';\nimport './App.css';\n\nconst App:FC = () => {\n  const [page, setCurrPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n  const totalPages = 42;\n\n  const onPageChange = useCallback((newCurrPage: number) => {\n    setCurrPage(newCurrPage);\n  }, [page]);\n\n  const onPerPageChange = useCallback((newPerPage: number) => {\n    setPerPage(newPerPage);\n  }, []);\n\n  const prevPage = useCallback(() => {\n    if (page > 1) {\n      setCurrPage(page - 1);\n    }\n  }, [page]);\n\n  const nextPage = useCallback(() => {\n    if (page <= totalPages) {\n      setCurrPage(page + 1);\n    }\n  }, [page, totalPages]);\n\n  return (\n    <>\n      <h1 className=\"app-title\">Pagination</h1>\n\n      <Pagination\n        totalPages={totalPages}\n        perPage={perPage}\n        page={page}\n        onPageChange={onPageChange}\n        onPerPageChange={onPerPageChange}\n        prevPage={prevPage}\n        nextPage={nextPage}\n        withInfo\n      />\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}